version: 2.1
#reusable executors: define build environment (container or vm) that can be used to run any job(s) in this config
executors:
  my-executor:
     docker:
      - image: cimg/node:15.6.0
    # resource_class: large
  
  ansible:
    docker:
      - image: cimg/python:3.9.6

orbs:
  heroku: circleci/heroku@1.2.6
  terraform: circleci/terraform@2.1.0

#orchestrate jobs: define dependencies, run order, and approval 
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
      - deploy-runner-via-terraform:
          name: "Deploy Server Instance"
          requires:
            - build
      - install-runner-via-ansible:
          name: "Install and Configure Runner" 
          requires: 
            - "Deploy Server Instance"
      - lint:
          requires:
            - "Install and Configure Runner"
      - test:
          requires:
            - "Install and Configure Runner"
      - hold:
          type: approval
          requires:
            - lint
            - test
          filters: 
            branches:
              only: main
      - heroku/deploy-via-git:
          requires: 
            - hold
          filters:
            branches:
              only: main

# reusable commands: can be called as steps in any job(s) in this config
commands:
  installnode:
    description: "Install and cache node"
    steps:
      - checkout
      - run: 
          name: Node Version
          command: node --version
      - run:
          name: Make /tmp/node_modules & ./node_modules Directory
          command: mkdir -p /tmp/node_modules && mkdir -p ./node_modules
      - restore_cache:
          keys: 
            - dependency-cache-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - dependency-cache-v1-{{ .Branch }}
            - dependency-cache-v1-
      - run:
          name: Move /tmp/node_modules to ./node_modules
          command: rsync -av /tmp/node_modules/ ./node_modules/
      - run: 
          name: NPM Install
          command: npm install --legacy-peer-deps
      - run:
          name: ./node_modules to /tmp/node_modules
          command: rm -rf /tmp/node_modules/* && mv ./node_modules/* /tmp/node_modules/
      - save_cache:
          paths:
            - /tmp/node_modules/
          key: dependency-cache-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: Remove /tmp/node_modules/
          command: rm -rf /tmp/node_modules
  
  install-ansible:
    description: "Install Ansible via Pip"
    parameters:
      version:
        type: string
        default: "2.9.24"        
    steps:
      - run:
          name: Installing Ansible via Pip
          command: |
            export PIP=$(which pip pip3 | head -1)
            if [[ -n $PIP ]]; then
              if which sudo > /dev/null; then
                if [ -n "<<parameters.version>>" ]; then
                  sudo $PIP install ansible==<<parameters.version>> --upgrade
                else
                  sudo $PIP install ansible --upgrade
                fi
              else
                if [ -n "<<parameters.version>>" ]; then
                  $PIP install ansible==<<parameters.version>> --upgrade --user
                else
                  $PIP install ansible --upgrade --user
                fi
              fi
            else
              echo "Unable to install Ansible. Please install pip."
              exit 1
            fi
  
  install-additional-packages:
    description: "Installing additional Packages for Ansible"
    steps:
      - run:
          name: Install boto3 & botocore
          command: |
            export PIP=$(which pip pip3 | head -1)
            if [[ -n $PIP ]]; then
              if which sudo > /dev/null; then
                sudo $PIP install boto3 botocore --upgrade
              else
                $PIP install boto3 botocore --upgrade --user
              fi
            else
              echo "Unable to install boto3 & botocore. Please install pip."
              exit 1
            fi
      - run:
          name: Install amazon.aws
          command: ansible-galaxy collection install amazon.aws
      - run:
          name: Install community.general
          command: ansible-galaxy collection install community.general

  install-runner:
    description: "Install Runner via Ansible"
    steps:
      - run:
          name: Run Ansible Playbook
          command: ansible-playbook -i aws_ec2.yml -vv runner.yml -u ansible -e "RESOURCE_CLASS_CREATION=false NAMESPACE=crowley-namespace ORG_NAME=james-crowley RESOURCE_CLASS=runner-demo API_TOKEN=$API_TOKEN target_hosts=$(cat output.txt)"

# builing blocks of ci/cd
jobs:
  build:
    executor: my-executor
    steps:
    # DLC does nothing here, its caching depends on commonality of the image layers.
      # - setup_remote_docker:
      #     docker_layer_caching: true
      - installnode
  lint: 
    machine: true
    resource_class: crowley-namespace/runner-demo
    steps:
      - installnode
      - run:
          name: Run Linting
          command: npm run lint
  test: 
    parallelism: 4
    machine: true
    resource_class: crowley-namespace/runner-demo
    steps:
      - installnode 
      - run: mkdir ~/junit
      - run: 
          name: Run Tests
          command: |
            TEST=$(circleci tests glob **/__tests__/*.js | circleci tests split --split-by=timings)
            npm run test:coverage $TEST
      - run: 
          command: cp test-results/junit.xml ~/junit
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
  
  deploy-runner-via-terraform:
    executor: terraform/default
    steps:
      - checkout
      - terraform/init:
          path: terraform/
      - terraform/apply:
          path: terraform/
          var_file: demo.tfvars
      - run:
          name: Write out Public IP value to output.txt
          command: echo "$(terraform output public_ip)" > output.txt
      - persist_to_workspace:
          root: .
          paths:
            - .

  install-runner-via-ansible:
    executor: ansible
    steps:
      - checkout
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints:
            - "dd:8f:af:18:32:a1:c9:b7:86:ca:73:a1:1e:77:db:87"
      - install-ansible:
          version: "2.9.24"
      - install-additional-packages
      - install-runner

  destroy-runner-via-terraform:
    executor: terraform/default
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/destroy:
          path: terraform/
          var_file: demo.tfvars
  












###########################################################################################################################
## setup workflows ##
# version: 2.1 

# setup: true

# orbs:
#   path-filtering: circleci/path-filtering@0.0.2

# workflows:
#   setup-workflow:
#     jobs:
#       - path-filtering/filter:
#           mapping: |
#             src/.* test-src true
#             back-end/.* back-end true
#             .circleci/.* circle-ci true
#           # Optional, defaults to main:
#           base-revision: origin/main